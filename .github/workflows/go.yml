name: Go CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    if: github.actor != 'github-actions'
    runs-on: ubuntu-latest

    # Expose the final tag (possibly suffixed for PRs) to downstream jobs
    outputs:
      version_tag: ${{ steps.adjust_tag.outputs.tag_name }}

    permissions:
      contents: write   # needed for creating releases

    steps:
      # ───── Setup ────────────────────────────────────────────────────────────
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      # ───── Versioning ────────────────────────────────────────────
      - name: Determine Next Version
        id: determine_version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          branch: main                           # base branch for SemVer

      # If this run comes from a PR, append a prerelease suffix
      - name: Adjust Tag For PR
        id: adjust_tag
        run: |
          TAG="${{ steps.determine_version.outputs.version_tag }}"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAG="${TAG}-prerelease.${{ github.run_number }}"
          fi
          echo "tag_name=${TAG}" >>"$GITHUB_OUTPUT"

      # ───── Lint / Build / Test ──────────────────────────────────────────────
      - name: Check Go formatting
        run: gofmt -l .

      - name: Build
        # This is how to inject the cliVersion but it doesn't work when using `go install` as that compiles
        # the application on the client's machine without any ldflags. Leavin this here for when we build
        # and publish through homebrew or some other package manager.
        run: |
          pwd
          ls -la
          go build -ldflags "-X version.cliVersion=${{ steps.adjust_tag.outputs.tag_name }}" ./

      - name: Set up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          
      - name: Run E2E Tests
        run: go test ./tests/... ./internal/...

      - name: Create Git Tag
        id: create_tag
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tagName = '${{ steps.adjust_tag.outputs.tag_name }}';
            const commitSha = context.sha;

            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: commitSha
            });


  smoke:
    runs-on: ubuntu-latest
    needs: build

    permissions:
      contents: read

    steps:
      # ───── Setup ────────────────────────────────────────────────────────────
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      # ───── Install binary built in previous job ─────────────────────────────
      - name: Install CLI from release tag
        run: |
          go install github.com/wcatron/query-projects@${{ needs.build.outputs.version_tag }}
          export PATH="${PATH}:$(go env GOPATH)/bin"

      # ───── Quick smoke test of the installed CLI ────────────────────────────
      - name: Set up Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Run smoke tests
        run: |
          cd example
          query-projects info
          query-projects pull
          query-projects run --script scripts/do-they-have-a-readme.ts
          query-projects run --script scripts/does-the-project-have-a-linter.ts
          query-projects run --script scripts/how-activily-maintained-is-the-project.ts
          query-projects run --script scripts/what-version-of-package-is-being-used.ts typescript
          query-projects run --script scripts/which-test-framework-is-being-used.ts
          query-projects run --script scripts/get-compiler-options-from-tsconfig.ts
          query-projects plan plans/test.lua
